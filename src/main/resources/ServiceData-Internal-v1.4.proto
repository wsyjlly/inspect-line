syntax = "proto3";
option java_outer_classname= "ServiceData";

//地理坐标
message PositionPb {
	//经度
	double lng = 1;
	//纬度
	double lat = 2;
	//高度
	float height = 3;
}

//标注信息
message LabelInfo {
	int32 xmin = 1;
	int32 ymin = 2;
	int32 xmax = 3;
	int32 ymax = 4;
}

//地理线段
message LinePb {
	//线段编号，例如 "779-3"
	string lineNumber = 1;
	//名称，例如"xx水库"
	string lineName = 2;
	//起点
	PositionPb start = 3;
	//终点
	PositionPb end = 4;
}

//配色及形状参数结构，用于信息叠加时线条或者图标的表示
message LineStylePb {
	//管线颜色，RGBA编码，字符串表示，格式例如"100,100,100,0.2"。
	string color = 1;
	//管线线条粗细，单位：px
	int32 width = 2;
	//线形, 0：实线，1：虚线
	int32 type = 3;
}

//关注区域结构，带配色和形状
message RegionPb {
	 //坐标列表
	 repeated PositionPb positions = 1;
	 //标记信息，文字，比如 "西南警戒区"
	 string markinfo = 2;
	 //配色及形状参数
	 LineStylePb lineStyle = 3;
}

//关注目标结构，带配色和形状
message TargetPb {
	//目标坐标
	PositionPb position = 1;
	//目标标记信息，文字，比如 "灯塔"
	string markType = 2;
	//配色及形状参数
	LineStylePb lineStyle = 3;
}

//管线数据结构，用于信息叠加，将管线以自定义线条形式叠加的视频流中
message PipeData {
	//坐标列表
	repeated PositionPb positions = 1;
	//配色及形状参数
	LineStylePb lineStyle = 2;
}

//管线附近警戒线数据结构，用于信息叠加，将多条警戒线以自定义线条形式叠加到视频流中
//v1.2更新：替换警戒距离为警戒线坐标列表
message CordonData {
	//警戒线坐标列表1
	repeated PositionPb line1 = 1;
	//警戒线坐标列表2
	repeated PositionPb line2 = 2;
	//配色及形状参数
	LineStylePb lineStyle = 3;
}

//关注区域和目标列表信息结构，整合关注区域和目标，用于信息叠加，在视频中将这些区域和目标进行叠加
message FocusData {
	//关注区域列表
	repeated RegionPb regions = 1;
	//关注目标列表
	repeated TargetPb targets = 2;
}

//历史图片结构，包括图片GPS信息、视场数据和访问URL
message HistoryImage {

	//该图片帧SEI中解析出的GPS信息
	PositionPb location = 1;
	
	//图片对应的视场数据，包含左上、左下、右上、右下、中心地理位置
	repeated PositionPb viewFild = 2;
	
	//图片访问url
	string url = 3;
}

//吊舱参数
message DemoParam{
 
	//水平像素元数量
	int32 m_nPixelNum_w = 1;

	//垂直像素元数量
	int32 m_nPixelNum_h = 2;

	//有效芯片尺寸-宽度  (mm)
	float m_fChipSize_w = 3;

	//有效芯片尺寸-高度  (mm)     
	float m_fChipSize_h = 4;

	//基础焦距 (mm)                   
	float m_fFocal_min = 5;  

	//俯仰偏移(°)
	float m_fPitch_Offset = 6;
				   
	//航向偏移(°)
	float m_fHeading_Offset = 7; 

	//放大倍数-传输值列表
	repeated  int32 m_vValueList = 8;

	//放大倍数-实际倍数列表      
	repeated  int32 m_vZoomList = 9;
}

//图片扩展数据
message ImageExtendData {

	//任务id
	int32 tid = 1;
	
	//图片帧编号
	int32 number = 2;
	
	//该图片帧SEI中解析出的GPS信息即飞机当前的地理坐标
	PositionPb location = 3;
	
	//图片对应的视场数据，包含左上、左下、右上、右下、中心
	repeated PositionPb viewField = 4;
	
	//图片二进制数据
	bytes imageData = 5;
	
	//图片的url
	string imageUrl = 6;
}


//目标识别的结果信息
message TargetInfo {

	//目标类别中文/英文名，例如 "车辆/car"
	string targetName = 1;
	
	//目标概率，比如0.8
	float targetProbability = 2;
	
	//标注信息
	LabelInfo lable = 3;
	
	//目标框的地理坐标
	repeated PositionPb positions = 4;
}

//变化区域信息
message ChangeInfo {
	
	//概率，比如0.8
	float targetProbability = 1;
	
	//标注信息
	LabelInfo lable = 2;
	
	//区域框的地理坐标
	repeated PositionPb positions = 3;
}


///////////////////////////////////////以下为实际使用的一级结构体////////////////////////////////

//任务数据
message TaskData {

	//任务id
	int32 tid = 1;
	
	//任务类型，1:信息叠加 2:变化检测 3:目标检测  4:视频解码  5:大图拼接
	//不影响原有算法注册流程，注册时携带算法类型，代理服务根据算法类型分配任务
	//备用字段，用于后续可能的修改或升级
	int32 type = 2;
	
	//视频类型，值为1或者2
	// 1表示实时流处理，videoUrl为rtsp拉流地址(例如: rtsp://www.wogrid.com/a-3-1)，outUrl为rtsp推流地址(例如: rtsp://www.wogrid.com/a-3-2)
	// 2表示历史视频文件处理，videoUrl为视频文件url(例如：http://vod.wogrid.com/a/b.mp4)，outUrl为视频本地存储地址(例如：/data/video/ai/3-2.mp4)
	int32 videoType = 3;
	
	//吊舱参数，用于视频解算
	DemoParam demoParam = 4;
	
	//图片帧处理间隔（抽帧检测），单位为秒，比如2表示每2秒处理一帧图片，0表示每一帧都处理
	//目前可以不用考虑该字段，默认值位0，表示每一帧都检测
	int32 interval = 5;
	
	//目标编号列表，比如要检测人物、车辆等，用于目标检测算法
	repeated int32 targetNumbers = 6;
	
	//管线数据，用于信息叠加算法
	PipeData pipeData = 7;

	//警戒线列表，用于信息叠加算法和变化检测算法，变化检测算法目前只检测警戒区域内的变化
	repeated CordonData cordonDatas = 8;

	//关注区域（目标）数据，用于信息叠加算法
	FocusData focusData = 9;
	
	//历史图片列表，用于变化检测算法作为对比模板
	repeated HistoryImage historyImages = 10;
	
	//拉流地址或者历史视频url
	string videoUrl = 11;
	
	//推流地址或者视频文件本地存储路径
	string outUrl = 12;
	
	//大图拼接的线段列表，用于大图拼接算法
	repeated LinePb lines = 13;
}

//变化检测结果输出
message ChangeDetectResult {

	//当前图片帧中检测到的变化区域列表
	repeated ChangeInfo changes = 1;
	
	//历史图片url
	string historyUrl = 2;
	
	//标注后的图片
	ImageExtendData image = 3;
}

//目标识别结果输出
message TargetDetectResult {

	//当前图片帧中检测到的目标列表
	repeated TargetInfo targets = 1;
	
	//原始图片
	ImageExtendData originImage = 2;

	//标注后的图片
	ImageExtendData markedImage = 3;
}

//大图拼接输出结果
//每拼接一张都要输出一次
message BigImageResult {

	//线段编号，例如 "779-3"
	string lineNumber = 1;
	
	//名称，例如"xx水库"
	string lineName = 2;
	
	//图片二进制数据
	bytes imageData = 3;
}

